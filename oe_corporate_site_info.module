<?php

/**
 * @file
 * OpenEuropa Corporate Site Information module.
 */

declare(strict_types = 1);

use Drupal\Core\Entity\Element\EntityAutocomplete;
use Drupal\Core\Form\FormStateInterface;
use Drupal\link\Plugin\Field\FieldWidget\LinkWidget;
use Drupal\node\NodeInterface;
use Drupal\rdf_skos\Entity\ConceptInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function oe_corporate_site_info_form_system_site_information_settings_alter(&$form, FormStateInterface $form_state, $form_id): void {
  $corporate_site_info = \Drupal::config('oe_corporate_site_info.settings');
  $skos_concept_storage = \Drupal::entityTypeManager()->getStorage('skos_concept');

  $accessibility_uri = $corporate_site_info->get('accessibility') ?? '';
  $form['accessibility'] = [
    '#type' => 'textfield',
    '#title' => t('Accessibility statement'),
    '#required' => TRUE,
    '#description' => t('Link to the accessibility statement of your website.'),
    '#process' => \Drupal::service('element_info')->getInfoProperty('entity_autocomplete', '#process'),
    '#default_value' => _oe_corporate_site_info_get_privacy_default_value($accessibility_uri),
    '#selection_handler' => 'default',
    '#target_type' => 'node',
    '#autocreate' => FALSE,
    '#element_validate' => [[LinkWidget::class, 'validateUriElement']],
    // Disable autocompletion when the first character is '/', '#' or '?'.
    '#attributes' => [
      'data-autocomplete-first-character-blacklist' => '/#?',
    ],
  ];

  $form['oe_site_information'] = [
    '#type' => 'details',
    '#title' => t('Corporate site information'),
    '#open' => TRUE,
  ];

  $site_owner = $corporate_site_info->get('site_owner') ?? NULL;
  $site_owner_entity = NULL;
  if ($site_owner) {
    $site_owner_entity = $skos_concept_storage->load($site_owner);
  }

  $form['oe_site_information']['site_owner'] = [
    '#title' => t('Site owner'),
    '#type' => 'entity_autocomplete',
    '#target_type' => 'skos_concept',
    '#selection_handler' => 'default:skos_concept',
    '#selection_settings' => [
      'concept_schemes' => [
        'http://publications.europa.eu/resource/authority/corporate-body',
      ],
      'match_operator' => 'CONTAINS',
      'match_limit' => 10,
    ],
    '#maxlength' => 1024,
    '#default_value' => $site_owner_entity,
    '#required' => TRUE,
    '#size' => 60,
    '#placeholder' => '',
  ];

  $content_owner_ids = $corporate_site_info->get('content_owners') ?? [];
  $content_owners_entities = [];
  foreach ($content_owner_ids as $key => $content_owner_id) {
    $skos_entity = $skos_concept_storage->load($content_owner_id);
    if ($skos_entity instanceof ConceptInterface) {
      $content_owners_entities[] = $skos_entity;
    }
  }

  $form['oe_site_information']['content_owners'] = [
    '#type' => 'multivalue',
    '#title' => t('Default content owner(s)'),
    '#required' => TRUE,
    'target' => [
      '#type' => 'entity_autocomplete',
      '#title' => t('Content owner'),
      '#title_display' => 'invisible',
      '#target_type' => 'skos_concept',
      '#selection_handler' => 'default:skos_concept',
      '#selection_settings' => [
        'concept_schemes' => [
          'http://publications.europa.eu/resource/authority/corporate-body',
        ],
        'match_operator' => 'CONTAINS',
        'match_limit' => 10,
      ],
      '#maxlength' => 1024,
      '#size' => 60,
      '#placeholder' => '',
    ],
    '#default_value' => $content_owners_entities,
    '#description' => t('This is not the writer of the content, but the subject matter expert responsible for keeping this content up to date. <br>When this field is populated, it will provide the default Content owner for all new content on this website. It can be overwritten for every new item.'),
  ];

  // SiteInformationForm::submitForm calls the parent ::submitForm,
  // so we need to add our submit function to the beginning of the list
  // to give it a chance to execute.
  array_unshift($form['#submit'], '_oe_corporate_site_info_settings_form_submit');
}

/**
 * Gets the URI without the 'internal:' or 'entity:' scheme.
 *
 * The following two forms of URIs are transformed:
 * - 'entity:' URIs: to entity autocomplete ("label (entity id)") strings;
 * - 'internal:' URIs: the scheme is stripped.
 *
 * This helper function duplicates the protected method
 * LinkWidget::getUriAsDisplayableString().
 *
 * @param string $uri
 *   The URI to get the displayable string for.
 *
 * @return string
 *   The URI without the 'internal:' or 'entity:' scheme
 *
 * @see \Drupal\link\Plugin\Field\FieldWidget\LinkWidget::getUriAsDisplayableString()
 */
function _oe_corporate_site_info_get_privacy_default_value(string $uri): string {
  $scheme = parse_url($uri, PHP_URL_SCHEME);
  // By default, the displayable string is the URI.
  $displayable_string = $uri;

  // A different displayable string may be chosen in case of the 'internal:'
  // or 'entity:' built-in schemes.
  if ($scheme === 'internal') {
    $uri_reference = explode(':', $uri, 2)[1];

    // @todo '<front>' is valid input for BC reasons, may be removed by
    // https://www.drupal.org/node/2421941
    $path = parse_url($uri, PHP_URL_PATH);
    if ($path === '/') {
      $uri_reference = '<front>' . substr($uri_reference, 1);
    }

    $displayable_string = $uri_reference;
  }
  elseif ($scheme === 'entity') {
    [$entity_type, $entity_id] = explode('/', substr($uri, 7), 2);
    // Show the 'entity:' URI as the entity autocomplete would.
    // @todo Support entity types other than 'node'. Will be fixed in
    // https://www.drupal.org/node/2423093.
    $entity = \Drupal::entityTypeManager()->getStorage($entity_type)->load($entity_id);
    if ($entity instanceof NodeInterface) {
      $displayable_string = EntityAutocomplete::getEntityLabels([$entity]);
    }
  }
  elseif ($scheme === 'route') {
    $displayable_string = ltrim($displayable_string, 'route:');
  }

  return $displayable_string;
}

/**
 * Submit handler for site information settings form.
 *
 * @param array $form
 *   The form elements array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state array.
 */
function _oe_corporate_site_info_settings_form_submit(array &$form, FormStateInterface $form_state): void {
  $corporate_site_info = \Drupal::configFactory()->getEditable('oe_corporate_site_info.settings');
  $corporate_site_info->set('site_owner', $form_state->getValue('site_owner'));
  $content_owner_ids = array_column($form_state->getValue('content_owners', []), 'target');
  $corporate_site_info->set('content_owners', $content_owner_ids);
  $corporate_site_info->set('accessibility', $form_state->getValue('accessibility'));
  $corporate_site_info->save();
}
